

print " ------ 8 --------";
var a = "global";
{
  fun showA() {
    // closure captures global a, should print "global" twice
    print a;
  }

  showA();
  var a = "block";
  showA();
}

print " ------ 7 --------";
fun outer_cal() {
  var a = 1;
  var b = 2;
  fun middle() {
    var c = 3;
    var d = 4;
    fun inner() {
      print a + c + b + d;
    }
    return inner;
  }
  return middle;
}
outer_cal()()();

print " ------ 6 --------";
fun outer() {
  var x = "value";
  fun middle() {
    fun inner() {
      print x;
    }

    print "create inner closure";
    return inner;
  }

  print "return from outer";
  return middle;
}

var mid = outer();
var in = mid();
in();

print " ------ 5 --------";
{
  var a = 300;
  fun f() {
    print a;
  }
  f();
}

print " ------ 4 --------";
fun one() {
  var x = 1;    // (1)
  x = 2;        // (2)
  fun two() { // (3)
    print x;
  }
  x = 3;
  two();
}
one();

print " ------ 3 --------";
fun makeClosure(value) {
  fun closure() {
    print value;
  }
  return closure;
}

var doughnut = makeClosure("doughnut");
var bagel = makeClosure("bagel");
doughnut();
bagel();

print " ------ 2 --------";
var globalSet;
var globalGet;
fun main() {
    var a = "initial";
    fun set() { a = "updated"; }
    fun get() { print a; }
    globalSet = set;
    globalGet = get;
}
main();
globalSet();
globalGet();

print " ------ 1 --------";
fun makeClosure() {
  var local = "local";
  fun closure() {
    print local;
  }
  return closure;
}

var closure = makeClosure();
closure();